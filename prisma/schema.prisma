generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// FIXME: add updatedBy for all models

enum Role {
  user // Regular user with limited access
  admin // Can manage users and view reports
  manager // Can manage coupons and requests

  @@map("role")
}

model User {
  id Int @id @default(autoincrement())

  name         String  @db.VarChar(50)
  username     String  @unique @db.VarChar(25)
  email        String  @unique @db.VarChar(100)
  password     String  @db.Char(97) // argon2 hash
  role         Role
  isActive     Boolean @default(true) @map("is_active")
  refreshToken String? @map("refresh_token") @db.VarChar(512)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  lastLogin DateTime? @map("last_login") @db.Timestamp()

  givenCoupons    CouponRequest[]
  auditLogs       AuditLog[]
  couponApprovals CouponRequestApproval[]
  Coupon          Coupon[]

  @@index([role])
  @@index([name])
  @@index([isActive])
  @@map("users")
}

enum CouponType {
  percentage
  fixed
}

model Coupon {
  id Int @id @default(autoincrement())

  code   String  @unique @db.VarChar(25)
  amount Decimal @db.Money // either a percentage or fixed amount

  isUsed Boolean    @default(false) @map("is_used")
  type   CouponType @default(fixed)

  createdById Int @map("created_by_id")

  createdDate  DateTime  @default(now()) @map("created_date") @db.Timestamp()
  assignedDate DateTime? @map("assigned_date") @db.Timestamp()

  couponRequest CouponRequest?
  createdBy     User           @relation(fields: [createdById], references: [id])

  @@index([assignedDate])
  @@index([amount])
  @@index([isUsed])
  @@map("coupons")
}

model CouponRequestCategory {
  id Int @id @default(autoincrement()) @db.SmallInt

  name        String  @unique @db.VarChar(50)
  description String? @db.VarChar(512)

  couponRequests CouponRequest[]

  @@map("coupon_request_categories")
}

model CouponRequest {
  id Int @id @default(autoincrement())

  orderNumber  BigInt @map("order_number")
  customerName String @map("customer_name") @db.VarChar(50)
  description  String @db.VarChar(512)
  userId       Int    @map("user_id")
  couponId     Int    @unique @map("coupon_id")
  categoryId   Int    @map("category_id")

  user     User                    @relation(fields: [userId], references: [id])
  coupon   Coupon                  @relation(fields: [couponId], references: [id])
  approval CouponRequestApproval[]
  category CouponRequestCategory   @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@map("issues")
}

enum CouponApprovalStatus {
  pending
  approved
  rejected

  @@map("coupon_approval_status")
}

model CouponRequestApproval {
  id Int @id @default(autoincrement())

  requestId    Int                  @map("request_id")
  userId       Int                  @map("user_id")
  status       CouponApprovalStatus @default(pending)
  decisionDate DateTime             @default(now()) @map("decision_date") @db.Timestamp()
  comment      String               @map("comment") @db.VarChar(512)

  request CouponRequest @relation(fields: [requestId], references: [id])
  user    User          @relation(fields: [userId], references: [id])

  @@index([requestId])
  @@index([userId])
  @@map("coupon_request_approvals")
}

model AuditLog {
  id String @id @default(uuid()) @db.Uuid

  action     String
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  userId     Int      @map("user_id")
  userRole   Role     @map("user_role")
  timestamp  DateTime @db.Timestamp()
  details    String
  ipAddress  String   @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.VarChar(255)
  device     String?  @db.VarChar(100)
  location   String?  @db.VarChar(100)

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
